# Build stage
FROM node:20-alpine as builder
WORKDIR /app

# Set proxy environment variables
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV npm_config_proxy=${HTTP_PROXY}
ENV npm_config_https_proxy=${HTTPS_PROXY}

# Install build dependencies
# RUN apk add --no-cache python3 make g++

# Copy package.json and script first
COPY frontend/web/package.json ./package.json
COPY frontend/web/prepare-web-package.js ./prepare-web-package.js
COPY frontend/web/tsconfig.json ./tsconfig.json

# Run script to prepare web package.json
RUN node prepare-web-package.js && \
  mv package.web.json package.json && \
  rm prepare-web-package.js

# Install dependencies
RUN npm install --legacy-peer-deps

# Copy source code (only web-related files)
COPY frontend/web .

# Build application
RUN npm run build:web

# Production stage
FROM nginx:alpine
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

RUN ls -la /app && \
  echo "Listing /app/.next directory:" && \
  ls -la /app/.next || echo "/.next directory not found" && \
  COPY --from=builder /app/.next /usr/share/nginx/html

ENV PORT=80
EXPOSE ${PORT}
CMD sh -c "envsubst '\$PORT' < /etc/nginx/conf.d/default.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
