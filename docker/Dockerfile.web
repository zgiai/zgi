# Build stage
FROM node:20-alpine as builder
WORKDIR /app

# Set proxy environment variables
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG WEB_PORT=80

ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV npm_config_proxy=${HTTP_PROXY}
ENV npm_config_https_proxy=${HTTPS_PROXY}
ENV WEB_PORT=${WEB_PORT}

# Verify proxy settings using wget (pre-installed in Alpine)
RUN echo "HTTP_PROXY: ${HTTP_PROXY}" && \
  echo "HTTPS_PROXY: ${HTTPS_PROXY}" && \
  echo "npm_config_proxy: ${npm_config_proxy}" && \
  echo "npm_config_https_proxy: ${npm_config_https_proxy}" && \
  wget -q --spider --no-check-certificate https://registry.npmjs.org/

# Install debugging tools
RUN apk add --no-cache curl vim procps

# Copy package files first
COPY frontend/web/package*.json ./
COPY frontend/web/prepare-web-package.js ./
COPY frontend/web/tsconfig.json ./

# Run script to prepare web package.json
RUN node prepare-web-package.js && \
  mv package.web.json package.json && \
  rm prepare-web-package.js

# Install dependencies with verbose output
RUN echo "Starting npm installation..." && \
  npm config set loglevel verbose && \
  npm install --verbose && \
  echo "npm installation completed"

# Copy source code
COPY frontend/web .

# Build application with verbose output
RUN echo "Starting build process..." && \
  npm run build:web --verbose && \
  echo "Build completed"

# Production stage
FROM nginx:alpine

COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Create directory and copy built files
COPY --from=builder /app/app/ /usr/share/nginx/html/

# Update healthcheck
HEALTHCHECK --interval=30s --timeout=3s \
  CMD wget -q --spider http://localhost:${WEB_PORT}/ || exit 1

# Start Nginx
CMD ["/bin/sh", "-c", "envsubst '$$WEB_PORT' < /etc/nginx/conf.d/default.conf > /etc/nginx/conf.d/default.conf.tmp && mv /etc/nginx/conf.d/default.conf.tmp /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]
