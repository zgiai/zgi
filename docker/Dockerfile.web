# Build stage
FROM node:20-alpine as builder
WORKDIR /app

# Set proxy environment variables
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV npm_config_proxy=${HTTP_PROXY}
ENV npm_config_https_proxy=${HTTPS_PROXY}

# Copy package.json and script first
COPY frontend/web/package.json ./package.json
COPY frontend/web/prepare-web-package.js ./prepare-web-package.js
COPY frontend/web/tsconfig.json ./tsconfig.json

# Run script to prepare web package.json
RUN node prepare-web-package.js && \
  mv package.web.json package.json && \
  rm prepare-web-package.js

# Install dependencies
RUN npm install --legacy-peer-deps

# Copy source code
COPY frontend/web .

# Build application and verify output
RUN npm run build:web && \
  echo "Build completed, checking output:" && \
  ls -la && \
  echo "Checking app directory:" && \
  ls -la app/ || echo "app directory not found"

# Production stage
FROM nginx:alpine

# Install debugging tools
RUN apk add --no-cache curl vim procps

COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Create directory for the app
RUN mkdir -p /usr/share/nginx/html

# Copy the entire app directory
COPY --from=builder /app/app/ /usr/share/nginx/html/

# Verify the copy
RUN echo "Checking nginx html directory:" && \
  ls -la /usr/share/nginx/html/

ENV PORT=80
EXPOSE ${PORT}

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:80/ || exit 1

# Start Nginx with environment variable substitution
CMD ["/bin/sh", "-c", "envsubst '$$PORT' < /etc/nginx/conf.d/default.conf > /etc/nginx/conf.d/default.conf.tmp && mv /etc/nginx/conf.d/default.conf.tmp /etc/nginx/conf.d/default.conf && nginx -g 'daemon off; error_log /dev/stdout debug;'"]
